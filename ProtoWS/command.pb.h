// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoWS/command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtoWS_2fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtoWS_2fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtoWS_2fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtoWS_2fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtoWS_2fcommand_2eproto;
class command;
class commandDefaultTypeInternal;
extern commandDefaultTypeInternal _command_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::command* Arena::CreateMaybeMessage<::command>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:command) */ {
 public:
  command();
  virtual ~command();

  command(const command& from);
  command(command&& from) noexcept
    : command() {
    *this = ::std::move(from);
  }

  inline command& operator=(const command& from) {
    CopyFrom(from);
    return *this;
  }
  inline command& operator=(command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const command* internal_default_instance() {
    return reinterpret_cast<const command*>(
               &_command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(command& a, command& b) {
    a.Swap(&b);
  }
  inline void Swap(command* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline command* New() const final {
    return CreateMaybeMessage<command>(nullptr);
  }

  command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const command& from);
  void MergeFrom(const command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtoWS_2fcommand_2eproto);
    return ::descriptor_table_ProtoWS_2fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHgMtxFieldNumber = 4,
    kMsgFieldNumber = 6,
    kServiceTypeFieldNumber = 1,
    kKickPowerFieldNumber = 2,
    kCatchPowerFieldNumber = 3,
    kMiscFieldNumber = 5,
  };
  // repeated float hg_mtx = 4 [packed = true];
  int hg_mtx_size() const;
  private:
  int _internal_hg_mtx_size() const;
  public:
  void clear_hg_mtx();
  private:
  float _internal_hg_mtx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_hg_mtx() const;
  void _internal_add_hg_mtx(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_hg_mtx();
  public:
  float hg_mtx(int index) const;
  void set_hg_mtx(int index, float value);
  void add_hg_mtx(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      hg_mtx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_hg_mtx();

  // required string msg = 6;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // required int32 service_type = 1;
  bool has_service_type() const;
  private:
  bool _internal_has_service_type() const;
  public:
  void clear_service_type();
  ::PROTOBUF_NAMESPACE_ID::int32 service_type() const;
  void set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_service_type() const;
  void _internal_set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float kick_power = 2;
  bool has_kick_power() const;
  private:
  bool _internal_has_kick_power() const;
  public:
  void clear_kick_power();
  float kick_power() const;
  void set_kick_power(float value);
  private:
  float _internal_kick_power() const;
  void _internal_set_kick_power(float value);
  public:

  // optional float catch_power = 3;
  bool has_catch_power() const;
  private:
  bool _internal_has_catch_power() const;
  public:
  void clear_catch_power();
  float catch_power() const;
  void set_catch_power(float value);
  private:
  float _internal_catch_power() const;
  void _internal_set_catch_power(float value);
  public:

  // optional int32 misc = 5;
  bool has_misc() const;
  private:
  bool _internal_has_misc() const;
  public:
  void clear_misc();
  ::PROTOBUF_NAMESPACE_ID::int32 misc() const;
  void set_misc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_misc() const;
  void _internal_set_misc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:command)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > hg_mtx_;
  mutable std::atomic<int> _hg_mtx_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_type_;
  float kick_power_;
  float catch_power_;
  ::PROTOBUF_NAMESPACE_ID::int32 misc_;
  friend struct ::TableStruct_ProtoWS_2fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// command

// required int32 service_type = 1;
inline bool command::_internal_has_service_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool command::has_service_type() const {
  return _internal_has_service_type();
}
inline void command::clear_service_type() {
  service_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 command::_internal_service_type() const {
  return service_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 command::service_type() const {
  // @@protoc_insertion_point(field_get:command.service_type)
  return _internal_service_type();
}
inline void command::_internal_set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  service_type_ = value;
}
inline void command::set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_service_type(value);
  // @@protoc_insertion_point(field_set:command.service_type)
}

// optional float kick_power = 2;
inline bool command::_internal_has_kick_power() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool command::has_kick_power() const {
  return _internal_has_kick_power();
}
inline void command::clear_kick_power() {
  kick_power_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float command::_internal_kick_power() const {
  return kick_power_;
}
inline float command::kick_power() const {
  // @@protoc_insertion_point(field_get:command.kick_power)
  return _internal_kick_power();
}
inline void command::_internal_set_kick_power(float value) {
  _has_bits_[0] |= 0x00000004u;
  kick_power_ = value;
}
inline void command::set_kick_power(float value) {
  _internal_set_kick_power(value);
  // @@protoc_insertion_point(field_set:command.kick_power)
}

// optional float catch_power = 3;
inline bool command::_internal_has_catch_power() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool command::has_catch_power() const {
  return _internal_has_catch_power();
}
inline void command::clear_catch_power() {
  catch_power_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float command::_internal_catch_power() const {
  return catch_power_;
}
inline float command::catch_power() const {
  // @@protoc_insertion_point(field_get:command.catch_power)
  return _internal_catch_power();
}
inline void command::_internal_set_catch_power(float value) {
  _has_bits_[0] |= 0x00000008u;
  catch_power_ = value;
}
inline void command::set_catch_power(float value) {
  _internal_set_catch_power(value);
  // @@protoc_insertion_point(field_set:command.catch_power)
}

// repeated float hg_mtx = 4 [packed = true];
inline int command::_internal_hg_mtx_size() const {
  return hg_mtx_.size();
}
inline int command::hg_mtx_size() const {
  return _internal_hg_mtx_size();
}
inline void command::clear_hg_mtx() {
  hg_mtx_.Clear();
}
inline float command::_internal_hg_mtx(int index) const {
  return hg_mtx_.Get(index);
}
inline float command::hg_mtx(int index) const {
  // @@protoc_insertion_point(field_get:command.hg_mtx)
  return _internal_hg_mtx(index);
}
inline void command::set_hg_mtx(int index, float value) {
  hg_mtx_.Set(index, value);
  // @@protoc_insertion_point(field_set:command.hg_mtx)
}
inline void command::_internal_add_hg_mtx(float value) {
  hg_mtx_.Add(value);
}
inline void command::add_hg_mtx(float value) {
  _internal_add_hg_mtx(value);
  // @@protoc_insertion_point(field_add:command.hg_mtx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
command::_internal_hg_mtx() const {
  return hg_mtx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
command::hg_mtx() const {
  // @@protoc_insertion_point(field_list:command.hg_mtx)
  return _internal_hg_mtx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
command::_internal_mutable_hg_mtx() {
  return &hg_mtx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
command::mutable_hg_mtx() {
  // @@protoc_insertion_point(field_mutable_list:command.hg_mtx)
  return _internal_mutable_hg_mtx();
}

// optional int32 misc = 5;
inline bool command::_internal_has_misc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool command::has_misc() const {
  return _internal_has_misc();
}
inline void command::clear_misc() {
  misc_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 command::_internal_misc() const {
  return misc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 command::misc() const {
  // @@protoc_insertion_point(field_get:command.misc)
  return _internal_misc();
}
inline void command::_internal_set_misc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  misc_ = value;
}
inline void command::set_misc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_misc(value);
  // @@protoc_insertion_point(field_set:command.misc)
}

// required string msg = 6;
inline bool command::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool command::has_msg() const {
  return _internal_has_msg();
}
inline void command::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& command::msg() const {
  // @@protoc_insertion_point(field_get:command.msg)
  return _internal_msg();
}
inline void command::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:command.msg)
}
inline std::string* command::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:command.msg)
  return _internal_mutable_msg();
}
inline const std::string& command::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void command::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void command::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:command.msg)
}
inline void command::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:command.msg)
}
inline void command::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:command.msg)
}
inline std::string* command::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* command::release_msg() {
  // @@protoc_insertion_point(field_release:command.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void command::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:command.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtoWS_2fcommand_2eproto
